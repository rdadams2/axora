{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nexport function useVideoUpload() {\n  _s();\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState(null);\n  const uploadVideo = async file => {\n    setUploading(true);\n    setError(null);\n    try {\n      // Convert file to base64\n      const base64 = await new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result.split(',')[1]);\n        reader.onerror = error => reject(error);\n      });\n      const response = await fetch('/api/upload-video', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          file: base64,\n          filename: 'Ananya_Naik_Walkthrough_Final.mp4'\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      const result = await response.json();\n      return result;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setUploading(false);\n    }\n  };\n  return {\n    uploadVideo,\n    uploading,\n    error\n  };\n}\n_s(useVideoUpload, \"/2HewAiKOOl3edvvi6+niArN5Ig=\");","map":{"version":3,"names":["useState","useVideoUpload","_s","uploading","setUploading","error","setError","uploadVideo","file","base64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","response","fetch","method","headers","body","JSON","stringify","filename","ok","Error","json","err","message"],"sources":["/Users/raeadams/rae_axora/axora/src/hooks/useVideoUpload.js"],"sourcesContent":["import { useState } from 'react'\n\nexport function useVideoUpload() {\n  const [uploading, setUploading] = useState(false)\n  const [error, setError] = useState(null)\n\n  const uploadVideo = async (file) => {\n    setUploading(true)\n    setError(null)\n\n    try {\n      // Convert file to base64\n      const base64 = await new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.readAsDataURL(file)\n        reader.onload = () => resolve(reader.result.split(',')[1])\n        reader.onerror = error => reject(error)\n      })\n\n      const response = await fetch('/api/upload-video', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          file: base64,\n          filename: 'Ananya_Naik_Walkthrough_Final.mp4'\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error('Upload failed')\n      }\n\n      const result = await response.json()\n      return result\n    } catch (err) {\n      setError(err.message)\n      throw err\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  return {\n    uploadVideo,\n    uploading,\n    error,\n  }\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMO,WAAW,GAAG,MAAOC,IAAI,IAAK;IAClCJ,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF;MACA,MAAMG,MAAM,GAAG,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpD,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,aAAa,CAACP,IAAI,CAAC;QAC1BK,MAAM,CAACG,MAAM,GAAG,MAAML,OAAO,CAACE,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1DL,MAAM,CAACM,OAAO,GAAGd,KAAK,IAAIO,MAAM,CAACP,KAAK,CAAC;MACzC,CAAC,CAAC;MAEF,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmB,EAAE;QAChDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBlB,IAAI,EAAEC,MAAM;UACZkB,QAAQ,EAAE;QACZ,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;MAClC;MAEA,MAAMZ,MAAM,GAAG,MAAMG,QAAQ,CAACU,IAAI,CAAC,CAAC;MACpC,OAAOb,MAAM;IACf,CAAC,CAAC,OAAOc,GAAG,EAAE;MACZzB,QAAQ,CAACyB,GAAG,CAACC,OAAO,CAAC;MACrB,MAAMD,GAAG;IACX,CAAC,SAAS;MACR3B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IACLG,WAAW;IACXJ,SAAS;IACTE;EACF,CAAC;AACH;AAACH,EAAA,CA/CeD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}