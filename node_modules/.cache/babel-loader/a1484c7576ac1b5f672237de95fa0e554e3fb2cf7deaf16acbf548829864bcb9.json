{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nexport function useBlob() {\n  _s();\n  const [uploading, setUploading] = useState(false);\n  const [error, setError] = useState(null);\n  const uploadFile = async (file, type = 'file', filename) => {\n    setUploading(true);\n    setError(null);\n    try {\n      // Convert file to base64\n      const base64 = await new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = () => resolve(reader.result.split(',')[1]);\n        reader.onerror = error => reject(error);\n      });\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          file: base64,\n          type,\n          filename: filename || file.name\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n      const result = await response.json();\n      return result;\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setUploading(false);\n    }\n  };\n  const deleteFile = async url => {\n    setError(null);\n    try {\n      const response = await fetch('/api/delete', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Delete failed');\n      }\n      return await response.json();\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    }\n  };\n  return {\n    uploadFile,\n    deleteFile,\n    uploading,\n    error\n  };\n}\n_s(useBlob, \"/2HewAiKOOl3edvvi6+niArN5Ig=\");","map":{"version":3,"names":["useState","useBlob","_s","uploading","setUploading","error","setError","uploadFile","file","type","filename","base64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","response","fetch","method","headers","body","JSON","stringify","name","ok","Error","json","err","message","deleteFile","url"],"sources":["/Users/raeadams/rae_axora/axora/src/hooks/useBlob.js"],"sourcesContent":["import { useState } from 'react'\n\nexport function useBlob() {\n  const [uploading, setUploading] = useState(false)\n  const [error, setError] = useState(null)\n\n  const uploadFile = async (file, type = 'file', filename) => {\n    setUploading(true)\n    setError(null)\n\n    try {\n      // Convert file to base64\n      const base64 = await new Promise((resolve, reject) => {\n        const reader = new FileReader()\n        reader.readAsDataURL(file)\n        reader.onload = () => resolve(reader.result.split(',')[1])\n        reader.onerror = error => reject(error)\n      })\n\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          file: base64,\n          type,\n          filename: filename || file.name\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error('Upload failed')\n      }\n\n      const result = await response.json()\n      return result\n    } catch (err) {\n      setError(err.message)\n      throw err\n    } finally {\n      setUploading(false)\n    }\n  }\n\n  const deleteFile = async (url) => {\n    setError(null)\n\n    try {\n      const response = await fetch('/api/delete', {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ url }),\n      })\n\n      if (!response.ok) {\n        throw new Error('Delete failed')\n      }\n\n      return await response.json()\n    } catch (err) {\n      setError(err.message)\n      throw err\n    }\n  }\n\n  return {\n    uploadFile,\n    deleteFile,\n    uploading,\n    error,\n  }\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMO,UAAU,GAAG,MAAAA,CAAOC,IAAI,EAAEC,IAAI,GAAG,MAAM,EAAEC,QAAQ,KAAK;IAC1DN,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF;MACA,MAAMK,MAAM,GAAG,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpD,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,aAAa,CAACT,IAAI,CAAC;QAC1BO,MAAM,CAACG,MAAM,GAAG,MAAML,OAAO,CAACE,MAAM,CAACI,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1DL,MAAM,CAACM,OAAO,GAAGhB,KAAK,IAAIS,MAAM,CAACT,KAAK,CAAC;MACzC,CAAC,CAAC;MAEF,MAAMiB,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;QAC1CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBpB,IAAI,EAAEG,MAAM;UACZF,IAAI;UACJC,QAAQ,EAAEA,QAAQ,IAAIF,IAAI,CAACqB;QAC7B,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;MAClC;MAEA,MAAMZ,MAAM,GAAG,MAAMG,QAAQ,CAACU,IAAI,CAAC,CAAC;MACpC,OAAOb,MAAM;IACf,CAAC,CAAC,OAAOc,GAAG,EAAE;MACZ3B,QAAQ,CAAC2B,GAAG,CAACC,OAAO,CAAC;MACrB,MAAMD,GAAG;IACX,CAAC,SAAS;MACR7B,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAM+B,UAAU,GAAG,MAAOC,GAAG,IAAK;IAChC9B,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMgB,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;QAC1CC,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEQ;QAAI,CAAC;MAC9B,CAAC,CAAC;MAEF,IAAI,CAACd,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;MAClC;MAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ3B,QAAQ,CAAC2B,GAAG,CAACC,OAAO,CAAC;MACrB,MAAMD,GAAG;IACX;EACF,CAAC;EAED,OAAO;IACL1B,UAAU;IACV4B,UAAU;IACVhC,SAAS;IACTE;EACF,CAAC;AACH;AAACH,EAAA,CAxEeD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}